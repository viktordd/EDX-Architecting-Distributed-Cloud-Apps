// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ServiceClients
{
    using Models;
    using System;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TemperatureHistorian.
    /// </summary>
    public static partial class TemperatureHistorianExtensions
    {
        /// <summary>
        /// AddDeviceData
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceId'>
        /// </param>
        /// <param name='datapointId'>
        /// </param>
        /// <param name='timestamp'>
        /// </param>
        /// <param name='value'>
        /// </param>
        public static float? AddDeviceData(this ITemperatureHistorian operations, string deviceId, string datapointId, System.DateTime timestamp, float? value)
        {
            return operations.AddDeviceDataAsync(deviceId, datapointId, timestamp, value).GetAwaiter().GetResult();
        }

        /// <summary>
        /// AddDeviceData
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceId'>
        /// </param>
        /// <param name='datapointId'>
        /// </param>
        /// <param name='timestamp'>
        /// </param>
        /// <param name='value'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async Task<float?> AddDeviceDataAsync(this ITemperatureHistorian operations, string deviceId, string datapointId, System.DateTime timestamp, float? value, CancellationToken cancellationToken = default(CancellationToken))
        {
            using (var _result = await operations.AddDeviceDataWithHttpMessagesAsync(deviceId, datapointId, timestamp, value, null, cancellationToken).ConfigureAwait(false))
            {
                if (_result.Body is float)
                    return (float?)_result.Body;
                else if(_result.Body is Error)
                    throw new Exception(((Error)_result.Body).Message);
                else
                    throw new Exception(_result.Body.ToString());
            }
        }

    }
}
